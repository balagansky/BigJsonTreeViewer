Now:
* basic search function
 + auto-select first result
* fix new window views into same file (handle vector of tree ctrls)
* reload from disk

Performance/Robustness:
* Handle objects with huge property list same way as arrays (dynamic folding)
* Optimize file reading
 + parse while reading! (bottleneck will be the slower of the two)
 + memory mapped IO ?
 + overlapped IO?
* Replace rapidjson with simdjson (4x faster?) - might not be the bottleneck though
* test handling of files with single value content
* handle bad buffer alloc(s)
* async updates

Code Cleanup:
* single version var
* clean up MFC code
* clean up PCH, windows includes (search for #undef)
* separate MFC code into a separate lib from the implementations (use interfaces for MFC hooks)

UX Glitches:
* context menus
* special display / auto-expansion of empty arrays/objects

UX Enhancements:
* Enable copying values from tree views
 + context menu choices for key and/or value
 + copy entire object/array to clipboard? (any limit?)
* Reload from disk
 + auto-prompt
* Tab tooltip shows full file path
* colors + icons in tree view
* support various ways of opening files:
 + drag and drop
 + context menu hook
 + file association
* Show array sizes
 + also object field count?
* installer
* Find enhancements:
 + separate key + value fields
 + ignore empty/null option

Feature Wishlist:
* Show pretty printed content of selected json values in doc panel (with syntax highlighting)
* Seach bar
* Save as formatted (with settings!)
* Memory limit settings - dedupe strings to try to keep under limit
 + Use trie with efficient allocator for optimal memory usage
 + simple map might be good enough